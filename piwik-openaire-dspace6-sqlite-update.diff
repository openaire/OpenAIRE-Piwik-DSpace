diff --git a/dspace/config/launcher.xml b/dspace/config/launcher.xml
index bf2c22618..c218eb142 100644
--- a/dspace/config/launcher.xml
+++ b/dspace/config/launcher.xml
@@ -373,4 +373,28 @@
             <class>org.dspace.app.util.Version</class>
         </step>
     </command>
+    <command>
+        <name>resend-to-matomo</name>
+        <description>Create Matomo DB for Missing Usage Events</description>
+        <arguments>-create</arguments>
+        <step>
+            <class>com.openaire.piwik.tracker.OpenAirePiwikTrackerUnreportedDB</class>
+        </step>
+    </command>
+    <command>
+        <name>resend-to-matomo</name>
+        <description>Retry sending all Missing Usage Events to Matomo</description>
+        <arguments>-retry</arguments>
+        <step>
+            <class>com.openaire.piwik.tracker.OpenAirePiwikTrackerUnreportedDB</class>
+        </step>
+    </command>
+    <command>
+        <name>resend-to-matomo</name>
+        <description>Delete Usage Events Sent to Matomo</description>
+        <arguments>-delete</arguments>
+        <step>
+            <class>com.openaire.piwik.tracker.OpenAirePiwikTrackerUnreportedDB</class>
+        </step>
+    </command>
 </commands>
diff --git a/dspace/config/modules/oapiwik.cfg b/dspace/config/modules/oapiwik.cfg
index 76b49c2da..db5866182 100755
--- a/dspace/config/modules/oapiwik.cfg
+++ b/dspace/config/modules/oapiwik.cfg
@@ -18,3 +18,9 @@ oapiwik.piwik.tokenAuth=32846584f571be9b57488bf4088f30ea
 
 # Flag to enable/disable tracking. Default is true
 oapiwik.piwik.enabled = true
+
+# Flag whether failed reports of views should be stored in a database to resend them later
+oapiwik.piwik.retry = true
+
+# Location of the SQLite DB on the file system is [dspace]/oapiwik.piwik.matomoDbLocation
+oapiwik.piwik.matomoDbLocation = var/Matomo.db
\ No newline at end of file
diff --git a/dspace/modules/openaire-piwik/openaire-piwik-api/pom.xml b/dspace/modules/openaire-piwik/openaire-piwik-api/pom.xml
index 70d6c6a33..b17ab592c 100755
--- a/dspace/modules/openaire-piwik/openaire-piwik-api/pom.xml
+++ b/dspace/modules/openaire-piwik/openaire-piwik-api/pom.xml
@@ -35,6 +35,12 @@
 		    <groupId>org.apache.httpcomponents</groupId>
 		    <artifactId>httpasyncclient</artifactId>
 		    <version>4.1.3</version>
-		</dependency>		
+		</dependency>
+        <!-- https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc -->
+        <dependency>
+            <groupId>org.xerial</groupId>
+            <artifactId>sqlite-jdbc</artifactId>
+            <version>3.21.0.1</version>
+        </dependency>
     </dependencies>
 </project>
diff --git a/dspace/modules/openaire-piwik/openaire-piwik-api/src/main/java/com/openaire/piwik/tracker/OpenAirePiwikTracker.java b/dspace/modules/openaire-piwik/openaire-piwik-api/src/main/java/com/openaire/piwik/tracker/OpenAirePiwikTracker.java
index 496e3e98b..ae47e448b 100755
--- a/dspace/modules/openaire-piwik/openaire-piwik-api/src/main/java/com/openaire/piwik/tracker/OpenAirePiwikTracker.java
+++ b/dspace/modules/openaire-piwik/openaire-piwik-api/src/main/java/com/openaire/piwik/tracker/OpenAirePiwikTracker.java
@@ -1,8 +1,8 @@
 /*
  * OpenAirePiwikTracker.java
  *
- * Version: 0.1
- * Date: 2017-04-09 
+ * Version: 0.2
+ * Date: 2018-05-20
  * Initial version @mire.  All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -87,6 +87,9 @@ public class OpenAirePiwikTracker extends AbstractUsageEventListener
     // test instances e.g..
     private boolean piwikEnabled;
 
+    // Flag if mising requests are stored in local DB for retry
+    private boolean piwikRetry;
+
     // Flag if a proxy is in front of the DSpace instance
     private boolean useProxies;
 
@@ -167,6 +170,9 @@ public class OpenAirePiwikTracker extends AbstractUsageEventListener
         piwikIPAnonymizationBytes = DSpaceServicesFactory.getInstance()
                 .getConfigurationService()
                 .getPropertyAsType("oapiwik.piwik.ipanonymizationbytes", 0);
+        piwikRetry = DSpaceServicesFactory.getInstance()
+                .getConfigurationService()
+                .getPropertyAsType("oapiwik.piwik.retry", true);
 
         // DSpace variables
         useProxies = DSpaceServicesFactory.getInstance()
@@ -405,6 +411,20 @@ public class OpenAirePiwikTracker extends AbstractUsageEventListener
             public void failed(final Exception ex)
             {
                 log.error("Error sending usage event to Piwik", ex);
+                try
+                {
+                    if (piwikRetry)
+                    {
+                        OpenAirePiwikTrackerUnreported unreportedReq = new OpenAirePiwikTrackerUnreported();
+                        unreportedReq.storeRequest(uri.toString());
+                        log.info("Missing request stored to local DB");
+                    }
+                }
+                catch (Exception e)
+                {
+                    log.error("Error storing unreported request");
+                }
+
             }
 
             @Override
diff --git a/dspace/modules/openaire-piwik/openaire-piwik-api/src/main/java/com/openaire/piwik/tracker/OpenAirePiwikTrackerUnreported.java b/dspace/modules/openaire-piwik/openaire-piwik-api/src/main/java/com/openaire/piwik/tracker/OpenAirePiwikTrackerUnreported.java
new file mode 100755
index 000000000..69ce2cba3
--- /dev/null
+++ b/dspace/modules/openaire-piwik/openaire-piwik-api/src/main/java/com/openaire/piwik/tracker/OpenAirePiwikTrackerUnreported.java
@@ -0,0 +1,86 @@
+/*
+ * OpenAirePiwikTrackerUnreported.java
+ *
+ * Version: 0.1
+ * Date: 2018-05-20
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ * - Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ * - Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
+ * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
+ * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+ * DAMAGE.
+ */
+package com.openaire.piwik.tracker;
+
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.SQLException;
+import java.sql.Statement;
+import java.sql.Timestamp;
+import java.util.Calendar;
+
+import org.apache.log4j.Logger;
+
+/**
+ * User: dpie (dpierrakos at gmail.com) Date: Time:
+ */
+public class OpenAirePiwikTrackerUnreported
+{
+
+    private static Logger log = Logger
+            .getLogger(OpenAirePiwikTrackerUnreported.class);
+
+    public OpenAirePiwikTrackerUnreported()
+    {
+        try
+        {
+            // The JDBC driver loading doesn't work for webapps without this.
+            // http://tomcat.apache.org/tomcat-8.0-doc/jndi-datasource-examples-howto.html#DriverManager,_the_service_provider_mechanism_and_memory_leaks
+            Class.forName("org.sqlite.JDBC");
+        }
+        catch (ClassNotFoundException e)
+        {
+            log.error("Could not load sqlite JDBC driver");
+        }
+    }
+
+    public void storeRequest(String requestLost) throws Exception
+    {
+
+        try (Connection conn = DriverManager.getConnection(
+                OpenAirePiwikTrackerUnreportedDB.getMatomoDatabaseUrl());
+                Statement stmt = conn.createStatement();)
+        {
+
+            log.info("Connected to Matomo DB...");
+
+            Timestamp currentTimestamp = new java.sql.Timestamp(
+                    Calendar.getInstance().getTime().getTime());
+            String sqlInsertMissingRequestsToDB = "INSERT INTO MissingInformation (time_req,url,isSend) "
+                    + "VALUES ('" + currentTimestamp + "','" + requestLost
+                    + "',0);";
+
+            stmt.execute(sqlInsertMissingRequestsToDB);
+        }
+        catch (SQLException e)
+        {
+            log.error(e.getMessage());
+        }
+    }
+}
\ No newline at end of file
diff --git a/dspace/modules/openaire-piwik/openaire-piwik-api/src/main/java/com/openaire/piwik/tracker/OpenAirePiwikTrackerUnreportedDB.java b/dspace/modules/openaire-piwik/openaire-piwik-api/src/main/java/com/openaire/piwik/tracker/OpenAirePiwikTrackerUnreportedDB.java
new file mode 100755
index 000000000..e4cdb7db0
--- /dev/null
+++ b/dspace/modules/openaire-piwik/openaire-piwik-api/src/main/java/com/openaire/piwik/tracker/OpenAirePiwikTrackerUnreportedDB.java
@@ -0,0 +1,155 @@
+/*
+ * OpenAirePiwikTrackerUnreportedDB.java
+ *
+ * Version: 0.1
+ * Date: 2018-05-20
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ * - Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ * - Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
+ * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
+ * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+ * DAMAGE.
+ */
+package com.openaire.piwik.tracker;
+
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.net.URLEncoder;
+import java.nio.charset.StandardCharsets;
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.ResultSet;
+import java.sql.Statement;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.dspace.services.factory.DSpaceServicesFactory;
+
+/**
+ * User: dpie (dpierrakos at gmail.com) Date: Time:
+**/
+public class OpenAirePiwikTrackerUnreportedDB
+{
+
+    public static String getMatomoDatabaseUrl()
+    {
+        String dspaceDir = DSpaceServicesFactory.getInstance()
+                .getConfigurationService().getProperty("dspace.dir");
+
+        String matomoDbLocation = DSpaceServicesFactory.getInstance()
+                .getConfigurationService()
+                .getProperty("oapiwik.piwik.matomoDbLocation");
+
+        String connectionStringMatomoDB = "jdbc:sqlite:" + dspaceDir + "/"
+                + matomoDbLocation;
+
+        return connectionStringMatomoDB;
+    }
+
+    public static void main(String[] args) throws Exception
+    {
+
+        String argument = args[0];
+        if (!("-create".equals(argument)) && !("-retry".equals(argument))
+                && !("-delete".equals(argument)))
+        {
+            System.out.println("Usage: dspace.dir/bin/dspace -create or -retry or -delete");
+            return;
+        }
+
+        try (Connection conn = DriverManager
+                .getConnection(getMatomoDatabaseUrl());
+                Statement stmt = conn.createStatement();)
+        {
+
+            System.out.println("Connected to Matomo DB...");
+            if (argument.equals("-create"))
+            {
+
+                String sqlCreate = "CREATE TABLE IF NOT EXISTS MissingInformation (time_req TEXT PRIMARY KEY, url TEXT NOT NULL, isSend INTEGER NOT NULL);";
+                stmt.executeUpdate(sqlCreate);
+            }
+            else if (argument.equals("-retry"))
+            {
+
+                try (ResultSet rs = stmt.executeQuery(
+                        "SELECT time_req, url FROM MissingInformation where isSend=0;");)
+                {
+                    String urlUnreported = "";
+                    String time_req = "";
+
+                    HashMap<String, String> timestampURLMap = new HashMap<String, String>();
+
+                    if (!rs.isBeforeFirst())
+                        System.out.println("No pending missing requests");
+
+                    else
+                    {
+                        while (rs.next())
+                        {
+                            time_req = rs.getString("time_req");
+                            urlUnreported = rs.getString("url");
+                            timestampURLMap.put(time_req, urlUnreported);
+                        }
+                    }
+
+                    for (Map.Entry<String, String> entry : timestampURLMap
+                            .entrySet())
+                    {
+                        String timeStamp = entry.getKey();
+                        String urlForReport = entry.getValue();
+
+                        URL obj = new URL(urlForReport + "&cdt="
+                                + URLEncoder.encode(timeStamp,
+                                        StandardCharsets.UTF_8.name()));
+                        HttpURLConnection con = (HttpURLConnection) obj
+                                .openConnection();
+                        int responseCode = con.getResponseCode();
+                        if (responseCode == 200)
+                        {
+                            String sqlUpdate = "";
+
+                            sqlUpdate = "UPDATE MissingInformation set isSend=1 where time_req='"
+                                    + timeStamp + "';";
+                            stmt.executeUpdate(sqlUpdate);
+                            System.out.println("Unreported Event sent");
+                        }
+                    }
+                }
+                catch (Exception e)
+                {
+                    System.out.println(e);
+                }
+            }
+            else if (argument.equals("-delete"))
+            {
+
+                String sqlPurge = "DELETE FROM MissingInformation where isSend=1;";
+                int deletedRowCount = stmt.executeUpdate(sqlPurge);
+                System.out.println(deletedRowCount
+                       +  " missing requests have already been sent to Matomo and deleted from local DB");
+
+            }
+        }
+        catch (Exception e)
+        {
+            System.out.println("Error in creating table " + e.getMessage());
+        }
+    }
+}
\ No newline at end of file
